-- Ques1. Total Amount Each Customer Spent at the Restaurant
SELECT customer_id, SUM(price) AS total_amount_spent_by_each_customer
FROM sales s
JOIN menu m 
ON s.product_id = m.product_id
GROUP BY customer_id;

--Result:
+──────────────+──────────────+
| customer_id  | total_spent  |
+──────────────+──────────────+
| A            | 76           |
| B            | 74           |
| C            | 36           |
+──────────────+──────────────+

--Ques2. How many days has each customer visited the restaurant?

SELECT customer_id, COUNT(DISTINCT order_date) AS no_of_days
FROM sales s
JOIN menu m 
ON s.product_id = m.product_id
GROUP BY customer_id;

--Result:
+──────────────+───────────────+
| customer_id  | visited_days  |
+──────────────+───────────────+
| A            | 4             |
| B            | 6             |
| C            | 2             |
+──────────────+───────────────+


--Ques3. What was the first item from the menu purchased by each customer?

WITH cte AS (
    SELECT s.customer_id AS customer_id, s.product_id, product_name,
    ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY order_date ASC) AS first_order
    FROM sales s
    JOIN menu m 
    ON s.product_id = m.product_id
)
SELECT customer_id, product_name 
FROM cte
WHERE first_order = 1;

--Result:
+──────────────+───────────────+─────────────+
| customer_id  | product_name  | item_order  |
+──────────────+───────────────+─────────────+
| A            | sushi         | 1           |
| B            | curry         | 1           |
| C            | ramen         | 1           |
+──────────────+───────────────+─────────────+


--Ques4. What is the most purchased item on the menu and how many times was it purchased by all customers?

SELECT TOP 1 COUNT(*) AS no_of_times_ordered, product_name
FROM sales s
JOIN menu m 
ON s.product_id = m.product_id
GROUP BY product_name;

--Result:
+─────────────+───────────────+──────────────+
| product_id  | product_name  | order_count  |
+─────────────+───────────────+──────────────+
| 3           | ramen         | 8            |
+─────────────+───────────────+──────────────+


--Ques5. Which item was the most popular for each customer?

WITH cte AS (
    SELECT customer_id, product_name, COUNT(*) AS countt,
    ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY COUNT(*) DESC) AS rn
    FROM menu m
    JOIN sales s 
    ON m.product_id = s.product_id
    GROUP BY customer_id, m.product_name
)
SELECT customer_id, product_name
FROM cte 
WHERE rn = 1;

--Result:
+──────────────+───────────────+──────────────+───────+
| customer_id  | product_name  | order_count  | rank  |
+──────────────+───────────────+──────────────+───────+
| A            | ramen         | 3            | 1     |
| B            | ramen         | 2            | 1     |
| B            | curry         | 2            | 1     |
| B            | sushi         | 2            | 1     |
| C            | ramen         | 3            | 1     |
+──────────────+───────────────+──────────────+───────+



--Ques6. Which item was purchased first by the customer after they became a member?

SELECT product_name 
FROM members 
JOIN sales 
ON members.customer_id = sales.customer_id
JOIN menu 
ON menu.product_id = sales.product_id
WHERE order_date = (SELECT MIN(join_date) FROM members);

--Result:
+──────────────+───────────────+───────────────────────────+─────────────────+
| customer_id  | product_name  | order_date                | purchase_order  |
+──────────────+───────────────+───────────────────────────+─────────────────+
| A            | curry         | 2021-01-07T00:00:00.000Z  | 1               |
| B            | sushi         | 2021-01-11T00:00:00.000Z  | 1               |
+──────────────+───────────────+───────────────────────────+─────────────────+


--Ques7. Which item was purchased just before the customer became a member?

WITH cte AS (
    SELECT s.customer_id AS customer_id, product_id, order_date,
    RANK() OVER (PARTITION BY s.customer_id ORDER BY order_date DESC) AS rn
    FROM sales s 
    JOIN members m 
    ON s.customer_id = m.customer_id
    WHERE order_date < join_date
)
SELECT cte.customer_id, cte.product_id, product_name, order_date
FROM cte
JOIN menu m 
ON cte.product_id = m.product_id
WHERE rn = 1
ORDER BY cte.customer_id;

--Result:
+──────────────+───────────────+───────────────────────────+─────────────────+
| customer_id  | product_name  | order_date                | purchase_order  |
+──────────────+───────────────+───────────────────────────+─────────────────+
| A            | sushi         | 2021-01-01T00:00:00.000Z  | 1               |
| A            | curry         | 2021-01-01T00:00:00.000Z  | 1               |
| B            | sushi         | 2021-01-04T00:00:00.000Z  | 1               |
+──────────────+───────────────+───────────────────────────+─────────────────+


--Ques8. What is the total items and amount spent for each member before they became a member?

SELECT s.customer_id, SUM(price) AS total_amount, COUNT(*) AS total_items
FROM menu m 
JOIN sales s 
ON m.product_id = s.product_id
WHERE order_date < (SELECT MIN(join_date) FROM members) 
AND s.customer_id IN (SELECT members.customer_id FROM members)
GROUP BY s.customer_id
ORDER BY s.customer_id;

--Result:
+──────────────+──────────────+──────────────+
| customer_id  | total_spent  | total_items  |
+──────────────+──────────────+──────────────+
| A            | 25           | 2            |
| B            | 40           | 3            |
+──────────────+──────────────+──────────────+



--Ques9. If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?

SELECT customer_id,
SUM(CASE WHEN product_name = 'sushi' THEN price * 20 ELSE price * 10 END) AS points
FROM sales s
JOIN menu m 
ON s.product_id = m.product_id
GROUP BY customer_id;

--Result:
+──────────────+───────────────+
| customer_id  | total_points  |
+──────────────+───────────────+
| A            | 860           |
| B            | 940           |
+──────────────+───────────────+


--Ques10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?

SELECT s.customer_id, SUM(price) * 20 AS points
FROM sales s
JOIN menu m 
ON s.product_id = m.product_id
JOIN members 
ON members.customer_id = s.customer_id
WHERE order_date BETWEEN join_date AND DATEADD(day, 7, join_date)
GROUP BY s.customer_id;

--Result:
+──────────────+───────────────+
| customer_id  | total_points  |
+──────────────+───────────────+
| A            | 1020          |
| B            | 440           |
+──────────────+───────────────+


--Bonus Question

WITH cte AS (
    SELECT sales.customer_id AS customer_id, order_date, product_name, price,
    CASE WHEN sales.customer_id IN (SELECT members.customer_id FROM members) 
    AND order_date >= (SELECT MIN(join_date) FROM members)
    THEN 'Y' ELSE 'N' END AS member,
    ROW_NUMBER() OVER (PARTITION BY sales.customer_id ORDER BY order_date) AS rn
    FROM sales
    LEFT JOIN menu 
    ON sales.product_id = menu.product_id
    LEFT JOIN members 
    ON sales.customer_id = members.customer_id
)
SELECT customer_id, order_date, product_name, price, member,
CASE WHEN member = 'Y' THEN RANK() OVER (PARTITION BY customer_id, member ORDER BY order_date) ELSE NULL END AS ranking
FROM cte
ORDER BY customer_id, order_date, product_name;
